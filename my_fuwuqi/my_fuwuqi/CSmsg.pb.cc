// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQuitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQuitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagUseRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagUseRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagShowSetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagShowSetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagVIPFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDecorateBagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDecorateBagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSRegisterLoginCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSBagCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSDecorateBagCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSmsg_2eproto() {
  protobuf_AddDesc_CSmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSmsg.proto");
  GOOGLE_CHECK(file != NULL);
  CSLoginReq_descriptor_ = file->message_type(0);
  static const int CSLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, password_),
  };
  CSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginReq_descriptor_,
      CSLoginReq::default_instance_,
      CSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginReq));
  CSLoginRsp_descriptor_ = file->message_type(1);
  static const int CSLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, role_),
  };
  CSLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginRsp_descriptor_,
      CSLoginRsp::default_instance_,
      CSLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginRsp));
  CSRegisterReq_descriptor_ = file->message_type(2);
  static const int CSRegisterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, name_),
  };
  CSRegisterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterReq_descriptor_,
      CSRegisterReq::default_instance_,
      CSRegisterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterReq));
  CSRegisterRsp_descriptor_ = file->message_type(3);
  static const int CSRegisterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, type_),
  };
  CSRegisterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterRsp_descriptor_,
      CSRegisterRsp::default_instance_,
      CSRegisterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterRsp));
  CSQuitReq_descriptor_ = file->message_type(4);
  static const int CSQuitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitReq, pad_),
  };
  CSQuitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQuitReq_descriptor_,
      CSQuitReq::default_instance_,
      CSQuitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQuitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQuitReq));
  CSRegisterLoginReqParam_descriptor_ = file->message_type(5);
  static const int CSRegisterLoginReqParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, loginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, registerreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, quitreq_),
  };
  CSRegisterLoginReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginReqParam_descriptor_,
      CSRegisterLoginReqParam::default_instance_,
      CSRegisterLoginReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginReqParam));
  CSRegisterLoginRspParam_descriptor_ = file->message_type(6);
  static const int CSRegisterLoginRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, loginrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, registerrsp_),
  };
  CSRegisterLoginRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginRspParam_descriptor_,
      CSRegisterLoginRspParam::default_instance_,
      CSRegisterLoginRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginRspParam));
  CSRegisterLoginReq_descriptor_ = file->message_type(7);
  static const int CSRegisterLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, reqparam_),
  };
  CSRegisterLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginReq_descriptor_,
      CSRegisterLoginReq::default_instance_,
      CSRegisterLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginReq));
  CSRegisterLoginRsp_descriptor_ = file->message_type(8);
  static const int CSRegisterLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, rspparam_),
  };
  CSRegisterLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginRsp_descriptor_,
      CSRegisterLoginRsp::default_instance_,
      CSRegisterLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginRsp));
  CSBagFetchReq_descriptor_ = file->message_type(9);
  static const int CSBagFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchReq, pad_),
  };
  CSBagFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagFetchReq_descriptor_,
      CSBagFetchReq::default_instance_,
      CSBagFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagFetchReq));
  CSBagGridInfo_descriptor_ = file->message_type(10);
  static const int CSBagGridInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, num_),
  };
  CSBagGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagGridInfo_descriptor_,
      CSBagGridInfo::default_instance_,
      CSBagGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagGridInfo));
  CSBagBagInfo_descriptor_ = file->message_type(11);
  static const int CSBagBagInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagBagInfo, gridinfo_),
  };
  CSBagBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagBagInfo_descriptor_,
      CSBagBagInfo::default_instance_,
      CSBagBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagBagInfo));
  CSBagFetchRsp_descriptor_ = file->message_type(12);
  static const int CSBagFetchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchRsp, baginfo_),
  };
  CSBagFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagFetchRsp_descriptor_,
      CSBagFetchRsp::default_instance_,
      CSBagFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagFetchRsp));
  CSBagUseReq_descriptor_ = file->message_type(13);
  static const int CSBagUseReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, pickedid_),
  };
  CSBagUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagUseReq_descriptor_,
      CSBagUseReq::default_instance_,
      CSBagUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagUseReq));
  CSItemInfo_descriptor_ = file->message_type(14);
  static const int CSItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, num_),
  };
  CSItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemInfo_descriptor_,
      CSItemInfo::default_instance_,
      CSItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemInfo));
  CSItemInfoList_descriptor_ = file->message_type(15);
  static const int CSItemInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfoList, iteminfo_),
  };
  CSItemInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemInfoList_descriptor_,
      CSItemInfoList::default_instance_,
      CSItemInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemInfoList));
  CSBagUseRsp_descriptor_ = file->message_type(16);
  static const int CSBagUseRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseRsp, iteminfolist_),
  };
  CSBagUseRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagUseRsp_descriptor_,
      CSBagUseRsp::default_instance_,
      CSBagUseRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagUseRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagUseRsp));
  CSBagReqParam_descriptor_ = file->message_type(17);
  static const int CSBagReqParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, fetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, usereq_),
  };
  CSBagReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagReqParam_descriptor_,
      CSBagReqParam::default_instance_,
      CSBagReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagReqParam));
  CSBagRspParam_descriptor_ = file->message_type(18);
  static const int CSBagRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, fetchrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, usersp_),
  };
  CSBagRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagRspParam_descriptor_,
      CSBagRspParam::default_instance_,
      CSBagRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagRspParam));
  CSBagReq_descriptor_ = file->message_type(19);
  static const int CSBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, reqparam_),
  };
  CSBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagReq_descriptor_,
      CSBagReq::default_instance_,
      CSBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagReq));
  CSBagRsp_descriptor_ = file->message_type(20);
  static const int CSBagRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, rspparam_),
  };
  CSBagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBagRsp_descriptor_,
      CSBagRsp::default_instance_,
      CSBagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBagRsp));
  CSDecorateBagFetchReq_descriptor_ = file->message_type(21);
  static const int CSDecorateBagFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchReq, type_),
  };
  CSDecorateBagFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagFetchReq_descriptor_,
      CSDecorateBagFetchReq::default_instance_,
      CSDecorateBagFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagFetchReq));
  CSDecorateBagGridInfo_descriptor_ = file->message_type(22);
  static const int CSDecorateBagGridInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, endtime_),
  };
  CSDecorateBagGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagGridInfo_descriptor_,
      CSDecorateBagGridInfo::default_instance_,
      CSDecorateBagGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagGridInfo));
  CSDecorateBagInfo_descriptor_ = file->message_type(23);
  static const int CSDecorateBagInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagInfo, decorategridinfo_),
  };
  CSDecorateBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagInfo_descriptor_,
      CSDecorateBagInfo::default_instance_,
      CSDecorateBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagInfo));
  CSDecorateBagFetchRsp_descriptor_ = file->message_type(24);
  static const int CSDecorateBagFetchRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, decoratebaginfo_),
  };
  CSDecorateBagFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagFetchRsp_descriptor_,
      CSDecorateBagFetchRsp::default_instance_,
      CSDecorateBagFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagFetchRsp));
  CSDecorateBagShowSetReq_descriptor_ = file->message_type(25);
  static const int CSDecorateBagShowSetReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, id_),
  };
  CSDecorateBagShowSetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagShowSetReq_descriptor_,
      CSDecorateBagShowSetReq::default_instance_,
      CSDecorateBagShowSetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagShowSetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagShowSetReq));
  CSDecorateBagVIPFetchReq_descriptor_ = file->message_type(26);
  static const int CSDecorateBagVIPFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchReq, type_),
  };
  CSDecorateBagVIPFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPFetchReq_descriptor_,
      CSDecorateBagVIPFetchReq::default_instance_,
      CSDecorateBagVIPFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPFetchReq));
  CSDecorateBagVIPItem_descriptor_ = file->message_type(27);
  static const int CSDecorateBagVIPItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, vipgread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, vipexper_),
  };
  CSDecorateBagVIPItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPItem_descriptor_,
      CSDecorateBagVIPItem::default_instance_,
      CSDecorateBagVIPItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPItem));
  CSDecorateBagVIPList_descriptor_ = file->message_type(28);
  static const int CSDecorateBagVIPList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPList, vipitemlist_),
  };
  CSDecorateBagVIPList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPList_descriptor_,
      CSDecorateBagVIPList::default_instance_,
      CSDecorateBagVIPList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPList));
  CSDecorateBagVIPFetchRsp_descriptor_ = file->message_type(29);
  static const int CSDecorateBagVIPFetchRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, decoratebaginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, viplist_),
  };
  CSDecorateBagVIPFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagVIPFetchRsp_descriptor_,
      CSDecorateBagVIPFetchRsp::default_instance_,
      CSDecorateBagVIPFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagVIPFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagVIPFetchRsp));
  CSDecorateBagReqParam_descriptor_ = file->message_type(30);
  static const int CSDecorateBagReqParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, fetchreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, showsetreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, vipfetchreq_),
  };
  CSDecorateBagReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagReqParam_descriptor_,
      CSDecorateBagReqParam::default_instance_,
      CSDecorateBagReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagReqParam));
  CSDecorateBagRspParam_descriptor_ = file->message_type(31);
  static const int CSDecorateBagRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, fetchrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, vipfetchrsp_),
  };
  CSDecorateBagRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagRspParam_descriptor_,
      CSDecorateBagRspParam::default_instance_,
      CSDecorateBagRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagRspParam));
  CSDecorateBagReq_descriptor_ = file->message_type(32);
  static const int CSDecorateBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, reqparam_),
  };
  CSDecorateBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagReq_descriptor_,
      CSDecorateBagReq::default_instance_,
      CSDecorateBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagReq));
  CSDecorateBagRsp_descriptor_ = file->message_type(33);
  static const int CSDecorateBagRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, rspparam_),
  };
  CSDecorateBagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDecorateBagRsp_descriptor_,
      CSDecorateBagRsp::default_instance_,
      CSDecorateBagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDecorateBagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDecorateBagRsp));
  CSMsgBody_descriptor_ = file->message_type(34);
  static const int CSMsgBody_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, registerloginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, registerloginrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, bagreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, bagrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, decoratebagreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, decoratebagrsp_),
  };
  CSMsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgBody_descriptor_,
      CSMsgBody::default_instance_,
      CSMsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgBody));
  CSMsgHead_descriptor_ = file->message_type(35);
  static const int CSMsgHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, msgid_),
  };
  CSMsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgHead_descriptor_,
      CSMsgHead::default_instance_,
      CSMsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgHead));
  CSMsg_descriptor_ = file->message_type(36);
  static const int CSMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, body_),
  };
  CSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsg_descriptor_,
      CSMsg::default_instance_,
      CSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsg));
  CSRegisterLoginCmd_descriptor_ = file->enum_type(0);
  CSBagCmd_descriptor_ = file->enum_type(1);
  CSDecorateBagCmd_descriptor_ = file->enum_type(2);
  CSMsgID_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginReq_descriptor_, &CSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginRsp_descriptor_, &CSLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterReq_descriptor_, &CSRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterRsp_descriptor_, &CSRegisterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQuitReq_descriptor_, &CSQuitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginReqParam_descriptor_, &CSRegisterLoginReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginRspParam_descriptor_, &CSRegisterLoginRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginReq_descriptor_, &CSRegisterLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginRsp_descriptor_, &CSRegisterLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagFetchReq_descriptor_, &CSBagFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagGridInfo_descriptor_, &CSBagGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagBagInfo_descriptor_, &CSBagBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagFetchRsp_descriptor_, &CSBagFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagUseReq_descriptor_, &CSBagUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemInfo_descriptor_, &CSItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemInfoList_descriptor_, &CSItemInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagUseRsp_descriptor_, &CSBagUseRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagReqParam_descriptor_, &CSBagReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagRspParam_descriptor_, &CSBagRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagReq_descriptor_, &CSBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBagRsp_descriptor_, &CSBagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagFetchReq_descriptor_, &CSDecorateBagFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagGridInfo_descriptor_, &CSDecorateBagGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagInfo_descriptor_, &CSDecorateBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagFetchRsp_descriptor_, &CSDecorateBagFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagShowSetReq_descriptor_, &CSDecorateBagShowSetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPFetchReq_descriptor_, &CSDecorateBagVIPFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPItem_descriptor_, &CSDecorateBagVIPItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPList_descriptor_, &CSDecorateBagVIPList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagVIPFetchRsp_descriptor_, &CSDecorateBagVIPFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagReqParam_descriptor_, &CSDecorateBagReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagRspParam_descriptor_, &CSDecorateBagRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagReq_descriptor_, &CSDecorateBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDecorateBagRsp_descriptor_, &CSDecorateBagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgBody_descriptor_, &CSMsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgHead_descriptor_, &CSMsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsg_descriptor_, &CSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSmsg_2eproto() {
  delete CSLoginReq::default_instance_;
  delete CSLoginReq_reflection_;
  delete CSLoginRsp::default_instance_;
  delete CSLoginRsp_reflection_;
  delete CSRegisterReq::default_instance_;
  delete CSRegisterReq_reflection_;
  delete CSRegisterRsp::default_instance_;
  delete CSRegisterRsp_reflection_;
  delete CSQuitReq::default_instance_;
  delete CSQuitReq_reflection_;
  delete CSRegisterLoginReqParam::default_instance_;
  delete CSRegisterLoginReqParam_reflection_;
  delete CSRegisterLoginRspParam::default_instance_;
  delete CSRegisterLoginRspParam_reflection_;
  delete CSRegisterLoginReq::default_instance_;
  delete CSRegisterLoginReq_reflection_;
  delete CSRegisterLoginRsp::default_instance_;
  delete CSRegisterLoginRsp_reflection_;
  delete CSBagFetchReq::default_instance_;
  delete CSBagFetchReq_reflection_;
  delete CSBagGridInfo::default_instance_;
  delete CSBagGridInfo_reflection_;
  delete CSBagBagInfo::default_instance_;
  delete CSBagBagInfo_reflection_;
  delete CSBagFetchRsp::default_instance_;
  delete CSBagFetchRsp_reflection_;
  delete CSBagUseReq::default_instance_;
  delete CSBagUseReq_reflection_;
  delete CSItemInfo::default_instance_;
  delete CSItemInfo_reflection_;
  delete CSItemInfoList::default_instance_;
  delete CSItemInfoList_reflection_;
  delete CSBagUseRsp::default_instance_;
  delete CSBagUseRsp_reflection_;
  delete CSBagReqParam::default_instance_;
  delete CSBagReqParam_reflection_;
  delete CSBagRspParam::default_instance_;
  delete CSBagRspParam_reflection_;
  delete CSBagReq::default_instance_;
  delete CSBagReq_reflection_;
  delete CSBagRsp::default_instance_;
  delete CSBagRsp_reflection_;
  delete CSDecorateBagFetchReq::default_instance_;
  delete CSDecorateBagFetchReq_reflection_;
  delete CSDecorateBagGridInfo::default_instance_;
  delete CSDecorateBagGridInfo_reflection_;
  delete CSDecorateBagInfo::default_instance_;
  delete CSDecorateBagInfo_reflection_;
  delete CSDecorateBagFetchRsp::default_instance_;
  delete CSDecorateBagFetchRsp_reflection_;
  delete CSDecorateBagShowSetReq::default_instance_;
  delete CSDecorateBagShowSetReq_reflection_;
  delete CSDecorateBagVIPFetchReq::default_instance_;
  delete CSDecorateBagVIPFetchReq_reflection_;
  delete CSDecorateBagVIPItem::default_instance_;
  delete CSDecorateBagVIPItem_reflection_;
  delete CSDecorateBagVIPList::default_instance_;
  delete CSDecorateBagVIPList_reflection_;
  delete CSDecorateBagVIPFetchRsp::default_instance_;
  delete CSDecorateBagVIPFetchRsp_reflection_;
  delete CSDecorateBagReqParam::default_instance_;
  delete CSDecorateBagReqParam_reflection_;
  delete CSDecorateBagRspParam::default_instance_;
  delete CSDecorateBagRspParam_reflection_;
  delete CSDecorateBagReq::default_instance_;
  delete CSDecorateBagReq_reflection_;
  delete CSDecorateBagRsp::default_instance_;
  delete CSDecorateBagRsp_reflection_;
  delete CSMsgBody::default_instance_;
  delete CSMsgBody_reflection_;
  delete CSMsgHead::default_instance_;
  delete CSMsgHead_reflection_;
  delete CSMsg::default_instance_;
  delete CSMsg_reflection_;
}

void protobuf_AddDesc_CSmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DBmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013CSmsg.proto\032\013DBmsg.proto\"/\n\nCSLoginReq"
    "\022\017\n\007account\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"5\n\nC"
    "SLoginRsp\022\014\n\004type\030\001 \001(\r\022\031\n\004Role\030\002 \001(\0132\013."
    "DBRoleInfo\"@\n\rCSRegisterReq\022\017\n\007account\030\001"
    " \001(\t\022\020\n\010password\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"\035\n\r"
    "CSRegisterRsp\022\014\n\004type\030\001 \001(\r\"\030\n\tCSQuitReq"
    "\022\013\n\003pad\030\001 \001(\r\"z\n\027CSRegisterLoginReqParam"
    "\022\035\n\010LoginReq\030\001 \001(\0132\013.CSLoginReq\022#\n\013Regis"
    "terReq\030\002 \001(\0132\016.CSRegisterReq\022\033\n\007QuitReq\030"
    "\003 \001(\0132\n.CSQuitReq\"]\n\027CSRegisterLoginRspP"
    "aram\022\035\n\010LoginRsp\030\001 \001(\0132\013.CSLoginRsp\022#\n\013R"
    "egisterRsp\030\002 \001(\0132\016.CSRegisterRsp\"b\n\022CSRe"
    "gisterLoginReq\022 \n\003cmd\030\001 \002(\0162\023.CSRegister"
    "LoginCmd\022*\n\010reqParam\030\002 \001(\0132\030.CSRegisterL"
    "oginReqParam\"r\n\022CSRegisterLoginRsp\022\016\n\006re"
    "sult\030\001 \001(\005\022 \n\003cmd\030\002 \002(\0162\023.CSRegisterLogi"
    "nCmd\022*\n\010rspParam\030\003 \001(\0132\030.CSRegisterLogin"
    "RspParam\"\034\n\rCSBagFetchReq\022\013\n\003pad\030\001 \001(\r\","
    "\n\rCSBagGridInfo\022\016\n\006ItemId\030\001 \001(\r\022\013\n\003Num\030\002"
    " \001(\r\"0\n\014CSBagBagInfo\022 \n\010GridInfo\030\001 \003(\0132\016"
    ".CSBagGridInfo\"/\n\rCSBagFetchRsp\022\036\n\007BagIn"
    "fo\030\001 \001(\0132\r.CSBagBagInfo\"@\n\013CSBagUseReq\022\016"
    "\n\006ItemId\030\001 \001(\r\022\017\n\007ItemNum\030\002 \001(\r\022\020\n\010Picke"
    "dId\030\003 \001(\r\"%\n\nCSItemInfo\022\n\n\002ID\030\001 \001(\005\022\013\n\003n"
    "um\030\002 \001(\005\"/\n\016CSItemInfoList\022\035\n\010ItemInfo\030\001"
    " \003(\0132\013.CSItemInfo\"4\n\013CSBagUseRsp\022%\n\014Item"
    "InfoList\030\001 \001(\0132\017.CSItemInfoList\"O\n\rCSBag"
    "ReqParam\022 \n\010FetchReq\030\001 \001(\0132\016.CSBagFetchR"
    "eq\022\034\n\006UseReq\030\002 \001(\0132\014.CSBagUseReq\"O\n\rCSBa"
    "gRspParam\022 \n\010FetchRsp\030\001 \001(\0132\016.CSBagFetch"
    "Rsp\022\034\n\006UseRsp\030\002 \001(\0132\014.CSBagUseRsp\"D\n\010CSB"
    "agReq\022\026\n\003cmd\030\001 \002(\0162\t.CSBagCmd\022 \n\010reqPara"
    "m\030\002 \001(\0132\016.CSBagReqParam\"T\n\010CSBagRsp\022\016\n\006r"
    "esult\030\001 \001(\005\022\026\n\003cmd\030\002 \002(\0162\t.CSBagCmd\022 \n\010r"
    "spParam\030\003 \001(\0132\016.CSBagRspParam\"%\n\025CSDecor"
    "ateBagFetchReq\022\014\n\004type\030\001 \001(\r\"F\n\025CSDecora"
    "teBagGridInfo\022\016\n\006ItemId\030\001 \001(\r\022\014\n\004type\030\002 "
    "\001(\r\022\017\n\007EndTime\030\003 \001(\004\"E\n\021CSDecorateBagInf"
    "o\0220\n\020DecorateGridInfo\030\001 \003(\0132\026.CSDecorate"
    "BagGridInfo\"^\n\025CSDecorateBagFetchRsp\022\014\n\004"
    "type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022+\n\017DecorateBagInf"
    "o\030\003 \001(\0132\022.CSDecorateBagInfo\"3\n\027CSDecorat"
    "eBagShowSetReq\022\014\n\004Type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r"
    "\"(\n\030CSDecorateBagVIPFetchReq\022\014\n\004type\030\001 \001"
    "(\r\":\n\024CSDecorateBagVIPItem\022\020\n\010VipGread\030\001"
    " \001(\r\022\020\n\010VipExper\030\002 \001(\r\"B\n\024CSDecorateBagV"
    "IPList\022*\n\013VIPItemList\030\001 \003(\0132\025.CSDecorate"
    "BagVIPItem\"\211\001\n\030CSDecorateBagVIPFetchRsp\022"
    "\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022+\n\017DecorateBag"
    "Info\030\003 \001(\0132\022.CSDecorateBagInfo\022&\n\007VipLis"
    "t\030\004 \001(\0132\025.CSDecorateBagVIPList\"\237\001\n\025CSDec"
    "orateBagReqParam\022(\n\010FetchReq\030\001 \001(\0132\026.CSD"
    "ecorateBagFetchReq\022,\n\nShowSetReq\030\002 \001(\0132\030"
    ".CSDecorateBagShowSetReq\022.\n\013VIPFetchReq\030"
    "\003 \001(\0132\031.CSDecorateBagVIPFetchReq\"q\n\025CSDe"
    "corateBagRspParam\022(\n\010FetchRsp\030\001 \001(\0132\026.CS"
    "DecorateBagFetchRsp\022.\n\013VIPFetchRsp\030\002 \001(\013"
    "2\031.CSDecorateBagVIPFetchRsp\"\\\n\020CSDecorat"
    "eBagReq\022\036\n\003cmd\030\001 \002(\0162\021.CSDecorateBagCmd\022"
    "(\n\010reqParam\030\002 \001(\0132\026.CSDecorateBagReqPara"
    "m\"l\n\020CSDecorateBagRsp\022\016\n\006result\030\001 \001(\005\022\036\n"
    "\003cmd\030\002 \002(\0162\021.CSDecorateBagCmd\022(\n\010rspPara"
    "m\030\003 \001(\0132\026.CSDecorateBagRspParam\"\365\001\n\tCSMs"
    "gBody\022-\n\020RegisterLoginReq\030\001 \001(\0132\023.CSRegi"
    "sterLoginReq\022-\n\020RegisterLoginRsp\030\002 \001(\0132\023"
    ".CSRegisterLoginRsp\022\031\n\006BagReq\030\003 \001(\0132\t.CS"
    "BagReq\022\031\n\006BagRsp\030\004 \001(\0132\t.CSBagRsp\022)\n\016Dec"
    "orateBagReq\030\005 \001(\0132\021.CSDecorateBagReq\022)\n\016"
    "DecorateBagRsp\030\006 \001(\0132\021.CSDecorateBagRsp\""
    "1\n\tCSMsgHead\022\013\n\003uid\030\001 \002(\004\022\027\n\005msgID\030\002 \002(\016"
    "2\010.CSMsgID\";\n\005CSMsg\022\030\n\004head\030\001 \002(\0132\n.CSMs"
    "gHead\022\030\n\004body\030\002 \002(\0132\n.CSMsgBody*p\n\022CSReg"
    "isterLoginCmd\022\037\n\033CSRegisterLoginCmd_Regi"
    "ster\020\001\022\034\n\030CSRegisterLoginCmd_Login\020\002\022\033\n\027"
    "CSRegisterLoginCmd_Quit\020\003*0\n\010CSBagCmd\022\022\n"
    "\016CSBagCmd_Fetch\020\001\022\020\n\014CSBagCmd_Use\020\002*k\n\020C"
    "SDecorateBagCmd\022\032\n\026CSDecorateBagCmd_Fetc"
    "h\020\001\022\034\n\030CSDecorateBagCmd_ShowSet\020\002\022\035\n\031CSD"
    "ecorateBagCmd_VipFetch\020\003*u\n\007CSMsgID\022\020\n\014C"
    "S_MSGID_MIN\020\000\022\032\n\026CS_MSGID_RegisterLogin\020"
    "\001\022\020\n\014CS_MSGID_BAG\020\002\022\030\n\024CS_MSGID_Decorate"
    "BAG\020\003\022\020\n\014CS_MSGID_MAX\020\004", 3263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSmsg.proto", &protobuf_RegisterTypes);
  CSLoginReq::default_instance_ = new CSLoginReq();
  CSLoginRsp::default_instance_ = new CSLoginRsp();
  CSRegisterReq::default_instance_ = new CSRegisterReq();
  CSRegisterRsp::default_instance_ = new CSRegisterRsp();
  CSQuitReq::default_instance_ = new CSQuitReq();
  CSRegisterLoginReqParam::default_instance_ = new CSRegisterLoginReqParam();
  CSRegisterLoginRspParam::default_instance_ = new CSRegisterLoginRspParam();
  CSRegisterLoginReq::default_instance_ = new CSRegisterLoginReq();
  CSRegisterLoginRsp::default_instance_ = new CSRegisterLoginRsp();
  CSBagFetchReq::default_instance_ = new CSBagFetchReq();
  CSBagGridInfo::default_instance_ = new CSBagGridInfo();
  CSBagBagInfo::default_instance_ = new CSBagBagInfo();
  CSBagFetchRsp::default_instance_ = new CSBagFetchRsp();
  CSBagUseReq::default_instance_ = new CSBagUseReq();
  CSItemInfo::default_instance_ = new CSItemInfo();
  CSItemInfoList::default_instance_ = new CSItemInfoList();
  CSBagUseRsp::default_instance_ = new CSBagUseRsp();
  CSBagReqParam::default_instance_ = new CSBagReqParam();
  CSBagRspParam::default_instance_ = new CSBagRspParam();
  CSBagReq::default_instance_ = new CSBagReq();
  CSBagRsp::default_instance_ = new CSBagRsp();
  CSDecorateBagFetchReq::default_instance_ = new CSDecorateBagFetchReq();
  CSDecorateBagGridInfo::default_instance_ = new CSDecorateBagGridInfo();
  CSDecorateBagInfo::default_instance_ = new CSDecorateBagInfo();
  CSDecorateBagFetchRsp::default_instance_ = new CSDecorateBagFetchRsp();
  CSDecorateBagShowSetReq::default_instance_ = new CSDecorateBagShowSetReq();
  CSDecorateBagVIPFetchReq::default_instance_ = new CSDecorateBagVIPFetchReq();
  CSDecorateBagVIPItem::default_instance_ = new CSDecorateBagVIPItem();
  CSDecorateBagVIPList::default_instance_ = new CSDecorateBagVIPList();
  CSDecorateBagVIPFetchRsp::default_instance_ = new CSDecorateBagVIPFetchRsp();
  CSDecorateBagReqParam::default_instance_ = new CSDecorateBagReqParam();
  CSDecorateBagRspParam::default_instance_ = new CSDecorateBagRspParam();
  CSDecorateBagReq::default_instance_ = new CSDecorateBagReq();
  CSDecorateBagRsp::default_instance_ = new CSDecorateBagRsp();
  CSMsgBody::default_instance_ = new CSMsgBody();
  CSMsgHead::default_instance_ = new CSMsgHead();
  CSMsg::default_instance_ = new CSMsg();
  CSLoginReq::default_instance_->InitAsDefaultInstance();
  CSLoginRsp::default_instance_->InitAsDefaultInstance();
  CSRegisterReq::default_instance_->InitAsDefaultInstance();
  CSRegisterRsp::default_instance_->InitAsDefaultInstance();
  CSQuitReq::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginReqParam::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginRspParam::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginReq::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginRsp::default_instance_->InitAsDefaultInstance();
  CSBagFetchReq::default_instance_->InitAsDefaultInstance();
  CSBagGridInfo::default_instance_->InitAsDefaultInstance();
  CSBagBagInfo::default_instance_->InitAsDefaultInstance();
  CSBagFetchRsp::default_instance_->InitAsDefaultInstance();
  CSBagUseReq::default_instance_->InitAsDefaultInstance();
  CSItemInfo::default_instance_->InitAsDefaultInstance();
  CSItemInfoList::default_instance_->InitAsDefaultInstance();
  CSBagUseRsp::default_instance_->InitAsDefaultInstance();
  CSBagReqParam::default_instance_->InitAsDefaultInstance();
  CSBagRspParam::default_instance_->InitAsDefaultInstance();
  CSBagReq::default_instance_->InitAsDefaultInstance();
  CSBagRsp::default_instance_->InitAsDefaultInstance();
  CSDecorateBagFetchReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagGridInfo::default_instance_->InitAsDefaultInstance();
  CSDecorateBagInfo::default_instance_->InitAsDefaultInstance();
  CSDecorateBagFetchRsp::default_instance_->InitAsDefaultInstance();
  CSDecorateBagShowSetReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPFetchReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPItem::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPList::default_instance_->InitAsDefaultInstance();
  CSDecorateBagVIPFetchRsp::default_instance_->InitAsDefaultInstance();
  CSDecorateBagReqParam::default_instance_->InitAsDefaultInstance();
  CSDecorateBagRspParam::default_instance_->InitAsDefaultInstance();
  CSDecorateBagReq::default_instance_->InitAsDefaultInstance();
  CSDecorateBagRsp::default_instance_->InitAsDefaultInstance();
  CSMsgBody::default_instance_->InitAsDefaultInstance();
  CSMsgHead::default_instance_->InitAsDefaultInstance();
  CSMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSmsg_2eproto {
  StaticDescriptorInitializer_CSmsg_2eproto() {
    protobuf_AddDesc_CSmsg_2eproto();
  }
} static_descriptor_initializer_CSmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* CSRegisterLoginCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginCmd_descriptor_;
}
bool CSRegisterLoginCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSBagCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagCmd_descriptor_;
}
bool CSBagCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSDecorateBagCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagCmd_descriptor_;
}
bool CSDecorateBagCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgID_descriptor_;
}
bool CSMsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginReq::kAccountFieldNumber;
const int CSLoginReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

CSLoginReq::CSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginReq::InitAsDefaultInstance() {
}

CSLoginReq::CSLoginReq(const CSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginReq::~CSLoginReq() {
  SharedDtor();
}

void CSLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginReq_descriptor_;
}

const CSLoginReq& CSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSLoginReq* CSLoginReq::default_instance_ = NULL;

CSLoginReq* CSLoginReq::New() const {
  return new CSLoginReq;
}

void CSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginReq::MergeFrom(const CSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginReq::CopyFrom(const CSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginReq::IsInitialized() const {

  return true;
}

void CSLoginReq::Swap(CSLoginReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginReq_descriptor_;
  metadata.reflection = CSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginRsp::kTypeFieldNumber;
const int CSLoginRsp::kRoleFieldNumber;
#endif  // !_MSC_VER

CSLoginRsp::CSLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginRsp::InitAsDefaultInstance() {
  role_ = const_cast< ::DBRoleInfo*>(&::DBRoleInfo::default_instance());
}

CSLoginRsp::CSLoginRsp(const CSLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginRsp::~CSLoginRsp() {
  SharedDtor();
}

void CSLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void CSLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginRsp_descriptor_;
}

const CSLoginRsp& CSLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSLoginRsp* CSLoginRsp::default_instance_ = NULL;

CSLoginRsp* CSLoginRsp::New() const {
  return new CSLoginRsp;
}

void CSLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_role()) {
      if (role_ != NULL) role_->::DBRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Role;
        break;
      }

      // optional .DBRoleInfo Role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .DBRoleInfo Role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .DBRoleInfo Role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .DBRoleInfo Role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginRsp::MergeFrom(const CSLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role()) {
      mutable_role()->::DBRoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginRsp::CopyFrom(const CSLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginRsp::IsInitialized() const {

  return true;
}

void CSLoginRsp::Swap(CSLoginRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginRsp_descriptor_;
  metadata.reflection = CSLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterReq::kAccountFieldNumber;
const int CSRegisterReq::kPasswordFieldNumber;
const int CSRegisterReq::kNameFieldNumber;
#endif  // !_MSC_VER

CSRegisterReq::CSRegisterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterReq::InitAsDefaultInstance() {
}

CSRegisterReq::CSRegisterReq(const CSRegisterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterReq::~CSRegisterReq() {
  SharedDtor();
}

void CSRegisterReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterReq_descriptor_;
}

const CSRegisterReq& CSRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterReq* CSRegisterReq::default_instance_ = NULL;

CSRegisterReq* CSRegisterReq::New() const {
  return new CSRegisterReq;
}

void CSRegisterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterReq::MergeFrom(const CSRegisterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterReq::CopyFrom(const CSRegisterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterReq::IsInitialized() const {

  return true;
}

void CSRegisterReq::Swap(CSRegisterReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterReq_descriptor_;
  metadata.reflection = CSRegisterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

CSRegisterRsp::CSRegisterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterRsp::InitAsDefaultInstance() {
}

CSRegisterRsp::CSRegisterRsp(const CSRegisterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterRsp::~CSRegisterRsp() {
  SharedDtor();
}

void CSRegisterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterRsp_descriptor_;
}

const CSRegisterRsp& CSRegisterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterRsp* CSRegisterRsp::default_instance_ = NULL;

CSRegisterRsp* CSRegisterRsp::New() const {
  return new CSRegisterRsp;
}

void CSRegisterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterRsp::MergeFrom(const CSRegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterRsp::CopyFrom(const CSRegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterRsp::IsInitialized() const {

  return true;
}

void CSRegisterRsp::Swap(CSRegisterRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterRsp_descriptor_;
  metadata.reflection = CSRegisterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSQuitReq::kPadFieldNumber;
#endif  // !_MSC_VER

CSQuitReq::CSQuitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQuitReq::InitAsDefaultInstance() {
}

CSQuitReq::CSQuitReq(const CSQuitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQuitReq::SharedCtor() {
  _cached_size_ = 0;
  pad_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQuitReq::~CSQuitReq() {
  SharedDtor();
}

void CSQuitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQuitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQuitReq_descriptor_;
}

const CSQuitReq& CSQuitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSQuitReq* CSQuitReq::default_instance_ = NULL;

CSQuitReq* CSQuitReq::New() const {
  return new CSQuitReq;
}

void CSQuitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pad_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pad = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQuitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQuitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pad = 1;
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQuitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQuitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQuitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQuitReq::MergeFrom(const CSQuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pad()) {
      set_pad(from.pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQuitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQuitReq::CopyFrom(const CSQuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQuitReq::IsInitialized() const {

  return true;
}

void CSQuitReq::Swap(CSQuitReq* other) {
  if (other != this) {
    std::swap(pad_, other->pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQuitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQuitReq_descriptor_;
  metadata.reflection = CSQuitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginReqParam::kLoginReqFieldNumber;
const int CSRegisterLoginReqParam::kRegisterReqFieldNumber;
const int CSRegisterLoginReqParam::kQuitReqFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginReqParam::CSRegisterLoginReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginReqParam::InitAsDefaultInstance() {
  loginreq_ = const_cast< ::CSLoginReq*>(&::CSLoginReq::default_instance());
  registerreq_ = const_cast< ::CSRegisterReq*>(&::CSRegisterReq::default_instance());
  quitreq_ = const_cast< ::CSQuitReq*>(&::CSQuitReq::default_instance());
}

CSRegisterLoginReqParam::CSRegisterLoginReqParam(const CSRegisterLoginReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginReqParam::SharedCtor() {
  _cached_size_ = 0;
  loginreq_ = NULL;
  registerreq_ = NULL;
  quitreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginReqParam::~CSRegisterLoginReqParam() {
  SharedDtor();
}

void CSRegisterLoginReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginreq_;
    delete registerreq_;
    delete quitreq_;
  }
}

void CSRegisterLoginReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginReqParam_descriptor_;
}

const CSRegisterLoginReqParam& CSRegisterLoginReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginReqParam* CSRegisterLoginReqParam::default_instance_ = NULL;

CSRegisterLoginReqParam* CSRegisterLoginReqParam::New() const {
  return new CSRegisterLoginReqParam;
}

void CSRegisterLoginReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginreq()) {
      if (loginreq_ != NULL) loginreq_->::CSLoginReq::Clear();
    }
    if (has_registerreq()) {
      if (registerreq_ != NULL) registerreq_->::CSRegisterReq::Clear();
    }
    if (has_quitreq()) {
      if (quitreq_ != NULL) quitreq_->::CSQuitReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSLoginReq LoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterReq;
        break;
      }

      // optional .CSRegisterReq RegisterReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_QuitReq;
        break;
      }

      // optional .CSQuitReq QuitReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuitReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginreq(), output);
  }

  // optional .CSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerreq(), output);
  }

  // optional .CSQuitReq QuitReq = 3;
  if (has_quitreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quitreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginreq(), target);
  }

  // optional .CSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerreq(), target);
  }

  // optional .CSQuitReq QuitReq = 3;
  if (has_quitreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quitreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSLoginReq LoginReq = 1;
    if (has_loginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginreq());
    }

    // optional .CSRegisterReq RegisterReq = 2;
    if (has_registerreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerreq());
    }

    // optional .CSQuitReq QuitReq = 3;
    if (has_quitreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quitreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginReqParam::MergeFrom(const CSRegisterLoginReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginreq()) {
      mutable_loginreq()->::CSLoginReq::MergeFrom(from.loginreq());
    }
    if (from.has_registerreq()) {
      mutable_registerreq()->::CSRegisterReq::MergeFrom(from.registerreq());
    }
    if (from.has_quitreq()) {
      mutable_quitreq()->::CSQuitReq::MergeFrom(from.quitreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginReqParam::CopyFrom(const CSRegisterLoginReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginReqParam::IsInitialized() const {

  return true;
}

void CSRegisterLoginReqParam::Swap(CSRegisterLoginReqParam* other) {
  if (other != this) {
    std::swap(loginreq_, other->loginreq_);
    std::swap(registerreq_, other->registerreq_);
    std::swap(quitreq_, other->quitreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginReqParam_descriptor_;
  metadata.reflection = CSRegisterLoginReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginRspParam::kLoginRspFieldNumber;
const int CSRegisterLoginRspParam::kRegisterRspFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginRspParam::CSRegisterLoginRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginRspParam::InitAsDefaultInstance() {
  loginrsp_ = const_cast< ::CSLoginRsp*>(&::CSLoginRsp::default_instance());
  registerrsp_ = const_cast< ::CSRegisterRsp*>(&::CSRegisterRsp::default_instance());
}

CSRegisterLoginRspParam::CSRegisterLoginRspParam(const CSRegisterLoginRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginRspParam::SharedCtor() {
  _cached_size_ = 0;
  loginrsp_ = NULL;
  registerrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginRspParam::~CSRegisterLoginRspParam() {
  SharedDtor();
}

void CSRegisterLoginRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginrsp_;
    delete registerrsp_;
  }
}

void CSRegisterLoginRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginRspParam_descriptor_;
}

const CSRegisterLoginRspParam& CSRegisterLoginRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginRspParam* CSRegisterLoginRspParam::default_instance_ = NULL;

CSRegisterLoginRspParam* CSRegisterLoginRspParam::New() const {
  return new CSRegisterLoginRspParam;
}

void CSRegisterLoginRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginrsp()) {
      if (loginrsp_ != NULL) loginrsp_->::CSLoginRsp::Clear();
    }
    if (has_registerrsp()) {
      if (registerrsp_ != NULL) registerrsp_->::CSRegisterRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSLoginRsp LoginRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterRsp;
        break;
      }

      // optional .CSRegisterRsp RegisterRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginrsp(), output);
  }

  // optional .CSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginrsp(), target);
  }

  // optional .CSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSLoginRsp LoginRsp = 1;
    if (has_loginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginrsp());
    }

    // optional .CSRegisterRsp RegisterRsp = 2;
    if (has_registerrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginRspParam::MergeFrom(const CSRegisterLoginRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginrsp()) {
      mutable_loginrsp()->::CSLoginRsp::MergeFrom(from.loginrsp());
    }
    if (from.has_registerrsp()) {
      mutable_registerrsp()->::CSRegisterRsp::MergeFrom(from.registerrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginRspParam::CopyFrom(const CSRegisterLoginRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginRspParam::IsInitialized() const {

  return true;
}

void CSRegisterLoginRspParam::Swap(CSRegisterLoginRspParam* other) {
  if (other != this) {
    std::swap(loginrsp_, other->loginrsp_);
    std::swap(registerrsp_, other->registerrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginRspParam_descriptor_;
  metadata.reflection = CSRegisterLoginRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginReq::kCmdFieldNumber;
const int CSRegisterLoginReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginReq::CSRegisterLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSRegisterLoginReqParam*>(&::CSRegisterLoginReqParam::default_instance());
}

CSRegisterLoginReq::CSRegisterLoginReq(const CSRegisterLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginReq::~CSRegisterLoginReq() {
  SharedDtor();
}

void CSRegisterLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSRegisterLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginReq_descriptor_;
}

const CSRegisterLoginReq& CSRegisterLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginReq* CSRegisterLoginReq::default_instance_ = NULL;

CSRegisterLoginReq* CSRegisterLoginReq::New() const {
  return new CSRegisterLoginReq;
}

void CSRegisterLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSRegisterLoginReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSRegisterLoginCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSRegisterLoginReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSRegisterLoginCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSRegisterLoginReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginReq::MergeFrom(const CSRegisterLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSRegisterLoginReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginReq::CopyFrom(const CSRegisterLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRegisterLoginReq::Swap(CSRegisterLoginReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginReq_descriptor_;
  metadata.reflection = CSRegisterLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginRsp::kResultFieldNumber;
const int CSRegisterLoginRsp::kCmdFieldNumber;
const int CSRegisterLoginRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginRsp::CSRegisterLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSRegisterLoginRspParam*>(&::CSRegisterLoginRspParam::default_instance());
}

CSRegisterLoginRsp::CSRegisterLoginRsp(const CSRegisterLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginRsp::~CSRegisterLoginRsp() {
  SharedDtor();
}

void CSRegisterLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSRegisterLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginRsp_descriptor_;
}

const CSRegisterLoginRsp& CSRegisterLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginRsp* CSRegisterLoginRsp::default_instance_ = NULL;

CSRegisterLoginRsp* CSRegisterLoginRsp::New() const {
  return new CSRegisterLoginRsp;
}

void CSRegisterLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSRegisterLoginRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSRegisterLoginCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSRegisterLoginRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSRegisterLoginCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSRegisterLoginRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginRsp::MergeFrom(const CSRegisterLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSRegisterLoginRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginRsp::CopyFrom(const CSRegisterLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSRegisterLoginRsp::Swap(CSRegisterLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginRsp_descriptor_;
  metadata.reflection = CSRegisterLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagFetchReq::kPadFieldNumber;
#endif  // !_MSC_VER

CSBagFetchReq::CSBagFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagFetchReq::InitAsDefaultInstance() {
}

CSBagFetchReq::CSBagFetchReq(const CSBagFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagFetchReq::SharedCtor() {
  _cached_size_ = 0;
  pad_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagFetchReq::~CSBagFetchReq() {
  SharedDtor();
}

void CSBagFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagFetchReq_descriptor_;
}

const CSBagFetchReq& CSBagFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagFetchReq* CSBagFetchReq::default_instance_ = NULL;

CSBagFetchReq* CSBagFetchReq::New() const {
  return new CSBagFetchReq;
}

void CSBagFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pad_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pad = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pad = 1;
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pad = 1;
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagFetchReq::MergeFrom(const CSBagFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pad()) {
      set_pad(from.pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagFetchReq::CopyFrom(const CSBagFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagFetchReq::IsInitialized() const {

  return true;
}

void CSBagFetchReq::Swap(CSBagFetchReq* other) {
  if (other != this) {
    std::swap(pad_, other->pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagFetchReq_descriptor_;
  metadata.reflection = CSBagFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagGridInfo::kItemIdFieldNumber;
const int CSBagGridInfo::kNumFieldNumber;
#endif  // !_MSC_VER

CSBagGridInfo::CSBagGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagGridInfo::InitAsDefaultInstance() {
}

CSBagGridInfo::CSBagGridInfo(const CSBagGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagGridInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagGridInfo::~CSBagGridInfo() {
  SharedDtor();
}

void CSBagGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagGridInfo_descriptor_;
}

const CSBagGridInfo& CSBagGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagGridInfo* CSBagGridInfo::default_instance_ = NULL;

CSBagGridInfo* CSBagGridInfo::New() const {
  return new CSBagGridInfo;
}

void CSBagGridInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagGridInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagGridInfo::MergeFrom(const CSBagGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagGridInfo::CopyFrom(const CSBagGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagGridInfo::IsInitialized() const {

  return true;
}

void CSBagGridInfo::Swap(CSBagGridInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagGridInfo_descriptor_;
  metadata.reflection = CSBagGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagBagInfo::kGridInfoFieldNumber;
#endif  // !_MSC_VER

CSBagBagInfo::CSBagBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagBagInfo::InitAsDefaultInstance() {
}

CSBagBagInfo::CSBagBagInfo(const CSBagBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagBagInfo::~CSBagBagInfo() {
  SharedDtor();
}

void CSBagBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagBagInfo_descriptor_;
}

const CSBagBagInfo& CSBagBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagBagInfo* CSBagBagInfo::default_instance_ = NULL;

CSBagBagInfo* CSBagBagInfo::New() const {
  return new CSBagBagInfo;
}

void CSBagBagInfo::Clear() {
  gridinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSBagGridInfo GridInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GridInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GridInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSBagGridInfo GridInfo = 1;
  for (int i = 0; i < this->gridinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gridinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSBagGridInfo GridInfo = 1;
  for (int i = 0; i < this->gridinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gridinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagBagInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CSBagGridInfo GridInfo = 1;
  total_size += 1 * this->gridinfo_size();
  for (int i = 0; i < this->gridinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagBagInfo::MergeFrom(const CSBagBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridinfo_.MergeFrom(from.gridinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagBagInfo::CopyFrom(const CSBagBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagBagInfo::IsInitialized() const {

  return true;
}

void CSBagBagInfo::Swap(CSBagBagInfo* other) {
  if (other != this) {
    gridinfo_.Swap(&other->gridinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagBagInfo_descriptor_;
  metadata.reflection = CSBagBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagFetchRsp::kBagInfoFieldNumber;
#endif  // !_MSC_VER

CSBagFetchRsp::CSBagFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagFetchRsp::InitAsDefaultInstance() {
  baginfo_ = const_cast< ::CSBagBagInfo*>(&::CSBagBagInfo::default_instance());
}

CSBagFetchRsp::CSBagFetchRsp(const CSBagFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagFetchRsp::~CSBagFetchRsp() {
  SharedDtor();
}

void CSBagFetchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete baginfo_;
  }
}

void CSBagFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagFetchRsp_descriptor_;
}

const CSBagFetchRsp& CSBagFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagFetchRsp* CSBagFetchRsp::default_instance_ = NULL;

CSBagFetchRsp* CSBagFetchRsp::New() const {
  return new CSBagFetchRsp;
}

void CSBagFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::CSBagBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSBagBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSBagBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSBagBagInfo BagInfo = 1;
  if (has_baginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSBagBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagFetchRsp::MergeFrom(const CSBagFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::CSBagBagInfo::MergeFrom(from.baginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagFetchRsp::CopyFrom(const CSBagFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagFetchRsp::IsInitialized() const {

  return true;
}

void CSBagFetchRsp::Swap(CSBagFetchRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagFetchRsp_descriptor_;
  metadata.reflection = CSBagFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagUseReq::kItemIdFieldNumber;
const int CSBagUseReq::kItemNumFieldNumber;
const int CSBagUseReq::kPickedIdFieldNumber;
#endif  // !_MSC_VER

CSBagUseReq::CSBagUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagUseReq::InitAsDefaultInstance() {
}

CSBagUseReq::CSBagUseReq(const CSBagUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagUseReq::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  pickedid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagUseReq::~CSBagUseReq() {
  SharedDtor();
}

void CSBagUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBagUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagUseReq_descriptor_;
}

const CSBagUseReq& CSBagUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagUseReq* CSBagUseReq::default_instance_ = NULL;

CSBagUseReq* CSBagUseReq::New() const {
  return new CSBagUseReq;
}

void CSBagUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    pickedid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }

      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PickedId;
        break;
      }

      // optional uint32 PickedId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PickedId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickedid_)));
          set_has_pickedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 ItemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

  // optional uint32 PickedId = 3;
  if (has_pickedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pickedid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 ItemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }

  // optional uint32 PickedId = 3;
  if (has_pickedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pickedid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

    // optional uint32 PickedId = 3;
    if (has_pickedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pickedid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagUseReq::MergeFrom(const CSBagUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_pickedid()) {
      set_pickedid(from.pickedid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagUseReq::CopyFrom(const CSBagUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagUseReq::IsInitialized() const {

  return true;
}

void CSBagUseReq::Swap(CSBagUseReq* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(pickedid_, other->pickedid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagUseReq_descriptor_;
  metadata.reflection = CSBagUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemInfo::kIDFieldNumber;
const int CSItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

CSItemInfo::CSItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemInfo::InitAsDefaultInstance() {
}

CSItemInfo::CSItemInfo(const CSItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemInfo::~CSItemInfo() {
  SharedDtor();
}

void CSItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemInfo_descriptor_;
}

const CSItemInfo& CSItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSItemInfo* CSItemInfo::default_instance_ = NULL;

CSItemInfo* CSItemInfo::New() const {
  return new CSItemInfo;
}

void CSItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemInfo::MergeFrom(const CSItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemInfo::CopyFrom(const CSItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemInfo::IsInitialized() const {

  return true;
}

void CSItemInfo::Swap(CSItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemInfo_descriptor_;
  metadata.reflection = CSItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemInfoList::kItemInfoFieldNumber;
#endif  // !_MSC_VER

CSItemInfoList::CSItemInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemInfoList::InitAsDefaultInstance() {
}

CSItemInfoList::CSItemInfoList(const CSItemInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemInfoList::~CSItemInfoList() {
  SharedDtor();
}

void CSItemInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemInfoList_descriptor_;
}

const CSItemInfoList& CSItemInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSItemInfoList* CSItemInfoList::default_instance_ = NULL;

CSItemInfoList* CSItemInfoList::New() const {
  return new CSItemInfoList;
}

void CSItemInfoList::Clear() {
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSItemInfo ItemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ItemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSItemInfo ItemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSItemInfo ItemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .CSItemInfo ItemInfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemInfoList::MergeFrom(const CSItemInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemInfoList::CopyFrom(const CSItemInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemInfoList::IsInitialized() const {

  return true;
}

void CSItemInfoList::Swap(CSItemInfoList* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemInfoList_descriptor_;
  metadata.reflection = CSItemInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagUseRsp::kItemInfoListFieldNumber;
#endif  // !_MSC_VER

CSBagUseRsp::CSBagUseRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagUseRsp::InitAsDefaultInstance() {
  iteminfolist_ = const_cast< ::CSItemInfoList*>(&::CSItemInfoList::default_instance());
}

CSBagUseRsp::CSBagUseRsp(const CSBagUseRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagUseRsp::SharedCtor() {
  _cached_size_ = 0;
  iteminfolist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagUseRsp::~CSBagUseRsp() {
  SharedDtor();
}

void CSBagUseRsp::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfolist_;
  }
}

void CSBagUseRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagUseRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagUseRsp_descriptor_;
}

const CSBagUseRsp& CSBagUseRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagUseRsp* CSBagUseRsp::default_instance_ = NULL;

CSBagUseRsp* CSBagUseRsp::New() const {
  return new CSBagUseRsp;
}

void CSBagUseRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfolist()) {
      if (iteminfolist_ != NULL) iteminfolist_->::CSItemInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagUseRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSItemInfoList ItemInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagUseRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSItemInfoList ItemInfoList = 1;
  if (has_iteminfolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfolist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagUseRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSItemInfoList ItemInfoList = 1;
  if (has_iteminfolist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfolist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagUseRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSItemInfoList ItemInfoList = 1;
    if (has_iteminfolist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfolist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagUseRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagUseRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagUseRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagUseRsp::MergeFrom(const CSBagUseRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfolist()) {
      mutable_iteminfolist()->::CSItemInfoList::MergeFrom(from.iteminfolist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagUseRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagUseRsp::CopyFrom(const CSBagUseRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagUseRsp::IsInitialized() const {

  return true;
}

void CSBagUseRsp::Swap(CSBagUseRsp* other) {
  if (other != this) {
    std::swap(iteminfolist_, other->iteminfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagUseRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagUseRsp_descriptor_;
  metadata.reflection = CSBagUseRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagReqParam::kFetchReqFieldNumber;
const int CSBagReqParam::kUseReqFieldNumber;
#endif  // !_MSC_VER

CSBagReqParam::CSBagReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagReqParam::InitAsDefaultInstance() {
  fetchreq_ = const_cast< ::CSBagFetchReq*>(&::CSBagFetchReq::default_instance());
  usereq_ = const_cast< ::CSBagUseReq*>(&::CSBagUseReq::default_instance());
}

CSBagReqParam::CSBagReqParam(const CSBagReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagReqParam::SharedCtor() {
  _cached_size_ = 0;
  fetchreq_ = NULL;
  usereq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagReqParam::~CSBagReqParam() {
  SharedDtor();
}

void CSBagReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchreq_;
    delete usereq_;
  }
}

void CSBagReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagReqParam_descriptor_;
}

const CSBagReqParam& CSBagReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagReqParam* CSBagReqParam::default_instance_ = NULL;

CSBagReqParam* CSBagReqParam::New() const {
  return new CSBagReqParam;
}

void CSBagReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchreq()) {
      if (fetchreq_ != NULL) fetchreq_->::CSBagFetchReq::Clear();
    }
    if (has_usereq()) {
      if (usereq_ != NULL) usereq_->::CSBagUseReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSBagFetchReq FetchReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UseReq;
        break;
      }

      // optional .CSBagUseReq UseReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UseReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usereq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchreq(), output);
  }

  // optional .CSBagUseReq UseReq = 2;
  if (has_usereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usereq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchreq(), target);
  }

  // optional .CSBagUseReq UseReq = 2;
  if (has_usereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usereq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSBagFetchReq FetchReq = 1;
    if (has_fetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchreq());
    }

    // optional .CSBagUseReq UseReq = 2;
    if (has_usereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usereq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagReqParam::MergeFrom(const CSBagReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchreq()) {
      mutable_fetchreq()->::CSBagFetchReq::MergeFrom(from.fetchreq());
    }
    if (from.has_usereq()) {
      mutable_usereq()->::CSBagUseReq::MergeFrom(from.usereq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagReqParam::CopyFrom(const CSBagReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagReqParam::IsInitialized() const {

  return true;
}

void CSBagReqParam::Swap(CSBagReqParam* other) {
  if (other != this) {
    std::swap(fetchreq_, other->fetchreq_);
    std::swap(usereq_, other->usereq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagReqParam_descriptor_;
  metadata.reflection = CSBagReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagRspParam::kFetchRspFieldNumber;
const int CSBagRspParam::kUseRspFieldNumber;
#endif  // !_MSC_VER

CSBagRspParam::CSBagRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagRspParam::InitAsDefaultInstance() {
  fetchrsp_ = const_cast< ::CSBagFetchRsp*>(&::CSBagFetchRsp::default_instance());
  usersp_ = const_cast< ::CSBagUseRsp*>(&::CSBagUseRsp::default_instance());
}

CSBagRspParam::CSBagRspParam(const CSBagRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagRspParam::SharedCtor() {
  _cached_size_ = 0;
  fetchrsp_ = NULL;
  usersp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagRspParam::~CSBagRspParam() {
  SharedDtor();
}

void CSBagRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchrsp_;
    delete usersp_;
  }
}

void CSBagRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagRspParam_descriptor_;
}

const CSBagRspParam& CSBagRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagRspParam* CSBagRspParam::default_instance_ = NULL;

CSBagRspParam* CSBagRspParam::New() const {
  return new CSBagRspParam;
}

void CSBagRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchrsp()) {
      if (fetchrsp_ != NULL) fetchrsp_->::CSBagFetchRsp::Clear();
    }
    if (has_usersp()) {
      if (usersp_ != NULL) usersp_->::CSBagUseRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSBagFetchRsp FetchRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UseRsp;
        break;
      }

      // optional .CSBagUseRsp UseRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UseRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usersp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchrsp(), output);
  }

  // optional .CSBagUseRsp UseRsp = 2;
  if (has_usersp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usersp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchrsp(), target);
  }

  // optional .CSBagUseRsp UseRsp = 2;
  if (has_usersp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usersp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSBagFetchRsp FetchRsp = 1;
    if (has_fetchrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchrsp());
    }

    // optional .CSBagUseRsp UseRsp = 2;
    if (has_usersp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usersp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagRspParam::MergeFrom(const CSBagRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchrsp()) {
      mutable_fetchrsp()->::CSBagFetchRsp::MergeFrom(from.fetchrsp());
    }
    if (from.has_usersp()) {
      mutable_usersp()->::CSBagUseRsp::MergeFrom(from.usersp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagRspParam::CopyFrom(const CSBagRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagRspParam::IsInitialized() const {

  return true;
}

void CSBagRspParam::Swap(CSBagRspParam* other) {
  if (other != this) {
    std::swap(fetchrsp_, other->fetchrsp_);
    std::swap(usersp_, other->usersp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagRspParam_descriptor_;
  metadata.reflection = CSBagRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagReq::kCmdFieldNumber;
const int CSBagReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSBagReq::CSBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSBagReqParam*>(&::CSBagReqParam::default_instance());
}

CSBagReq::CSBagReq(const CSBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagReq::~CSBagReq() {
  SharedDtor();
}

void CSBagReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagReq_descriptor_;
}

const CSBagReq& CSBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagReq* CSBagReq::default_instance_ = NULL;

CSBagReq* CSBagReq::New() const {
  return new CSBagReq;
}

void CSBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSBagReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSBagCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSBagReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSBagCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSBagReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSBagCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSBagReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSBagCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSBagReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagReq::MergeFrom(const CSBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSBagReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagReq::CopyFrom(const CSBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBagReq::Swap(CSBagReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagReq_descriptor_;
  metadata.reflection = CSBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBagRsp::kResultFieldNumber;
const int CSBagRsp::kCmdFieldNumber;
const int CSBagRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSBagRsp::CSBagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBagRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSBagRspParam*>(&::CSBagRspParam::default_instance());
}

CSBagRsp::CSBagRsp(const CSBagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBagRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBagRsp::~CSBagRsp() {
  SharedDtor();
}

void CSBagRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSBagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBagRsp_descriptor_;
}

const CSBagRsp& CSBagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSBagRsp* CSBagRsp::default_instance_ = NULL;

CSBagRsp* CSBagRsp::New() const {
  return new CSBagRsp;
}

void CSBagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSBagRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSBagCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSBagRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSBagCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSBagRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSBagCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSBagRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSBagCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSBagRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBagRsp::MergeFrom(const CSBagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSBagRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBagRsp::CopyFrom(const CSBagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSBagRsp::Swap(CSBagRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBagRsp_descriptor_;
  metadata.reflection = CSBagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagFetchReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagFetchReq::CSDecorateBagFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagFetchReq::InitAsDefaultInstance() {
}

CSDecorateBagFetchReq::CSDecorateBagFetchReq(const CSDecorateBagFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagFetchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagFetchReq::~CSDecorateBagFetchReq() {
  SharedDtor();
}

void CSDecorateBagFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagFetchReq_descriptor_;
}

const CSDecorateBagFetchReq& CSDecorateBagFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagFetchReq* CSDecorateBagFetchReq::default_instance_ = NULL;

CSDecorateBagFetchReq* CSDecorateBagFetchReq::New() const {
  return new CSDecorateBagFetchReq;
}

void CSDecorateBagFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagFetchReq::MergeFrom(const CSDecorateBagFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagFetchReq::CopyFrom(const CSDecorateBagFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagFetchReq::IsInitialized() const {

  return true;
}

void CSDecorateBagFetchReq::Swap(CSDecorateBagFetchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagFetchReq_descriptor_;
  metadata.reflection = CSDecorateBagFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagGridInfo::kItemIdFieldNumber;
const int CSDecorateBagGridInfo::kTypeFieldNumber;
const int CSDecorateBagGridInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagGridInfo::CSDecorateBagGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagGridInfo::InitAsDefaultInstance() {
}

CSDecorateBagGridInfo::CSDecorateBagGridInfo(const CSDecorateBagGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagGridInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  type_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagGridInfo::~CSDecorateBagGridInfo() {
  SharedDtor();
}

void CSDecorateBagGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagGridInfo_descriptor_;
}

const CSDecorateBagGridInfo& CSDecorateBagGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagGridInfo* CSDecorateBagGridInfo::default_instance_ = NULL;

CSDecorateBagGridInfo* CSDecorateBagGridInfo::New() const {
  return new CSDecorateBagGridInfo;
}

void CSDecorateBagGridInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    type_ = 0u;
    endtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagGridInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagGridInfo::MergeFrom(const CSDecorateBagGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagGridInfo::CopyFrom(const CSDecorateBagGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagGridInfo::IsInitialized() const {

  return true;
}

void CSDecorateBagGridInfo::Swap(CSDecorateBagGridInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagGridInfo_descriptor_;
  metadata.reflection = CSDecorateBagGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagInfo::kDecorateGridInfoFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagInfo::CSDecorateBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagInfo::InitAsDefaultInstance() {
}

CSDecorateBagInfo::CSDecorateBagInfo(const CSDecorateBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagInfo::~CSDecorateBagInfo() {
  SharedDtor();
}

void CSDecorateBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagInfo_descriptor_;
}

const CSDecorateBagInfo& CSDecorateBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagInfo* CSDecorateBagInfo::default_instance_ = NULL;

CSDecorateBagInfo* CSDecorateBagInfo::New() const {
  return new CSDecorateBagInfo;
}

void CSDecorateBagInfo::Clear() {
  decorategridinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateGridInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decorategridinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DecorateGridInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
  for (int i = 0; i < this->decorategridinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->decorategridinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
  for (int i = 0; i < this->decorategridinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->decorategridinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CSDecorateBagGridInfo DecorateGridInfo = 1;
  total_size += 1 * this->decorategridinfo_size();
  for (int i = 0; i < this->decorategridinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decorategridinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagInfo::MergeFrom(const CSDecorateBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  decorategridinfo_.MergeFrom(from.decorategridinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagInfo::CopyFrom(const CSDecorateBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagInfo::IsInitialized() const {

  return true;
}

void CSDecorateBagInfo::Swap(CSDecorateBagInfo* other) {
  if (other != this) {
    decorategridinfo_.Swap(&other->decorategridinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagInfo_descriptor_;
  metadata.reflection = CSDecorateBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagFetchRsp::kTypeFieldNumber;
const int CSDecorateBagFetchRsp::kIdFieldNumber;
const int CSDecorateBagFetchRsp::kDecorateBagInfoFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagFetchRsp::CSDecorateBagFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagFetchRsp::InitAsDefaultInstance() {
  decoratebaginfo_ = const_cast< ::CSDecorateBagInfo*>(&::CSDecorateBagInfo::default_instance());
}

CSDecorateBagFetchRsp::CSDecorateBagFetchRsp(const CSDecorateBagFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  decoratebaginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagFetchRsp::~CSDecorateBagFetchRsp() {
  SharedDtor();
}

void CSDecorateBagFetchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete decoratebaginfo_;
  }
}

void CSDecorateBagFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagFetchRsp_descriptor_;
}

const CSDecorateBagFetchRsp& CSDecorateBagFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagFetchRsp* CSDecorateBagFetchRsp::default_instance_ = NULL;

CSDecorateBagFetchRsp* CSDecorateBagFetchRsp::New() const {
  return new CSDecorateBagFetchRsp;
}

void CSDecorateBagFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    if (has_decoratebaginfo()) {
      if (decoratebaginfo_ != NULL) decoratebaginfo_->::CSDecorateBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DecorateBagInfo;
        break;
      }

      // optional .CSDecorateBagInfo DecorateBagInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebaginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decoratebaginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->decoratebaginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .CSDecorateBagInfo DecorateBagInfo = 3;
    if (has_decoratebaginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebaginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagFetchRsp::MergeFrom(const CSDecorateBagFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_decoratebaginfo()) {
      mutable_decoratebaginfo()->::CSDecorateBagInfo::MergeFrom(from.decoratebaginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagFetchRsp::CopyFrom(const CSDecorateBagFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagFetchRsp::IsInitialized() const {

  return true;
}

void CSDecorateBagFetchRsp::Swap(CSDecorateBagFetchRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(decoratebaginfo_, other->decoratebaginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagFetchRsp_descriptor_;
  metadata.reflection = CSDecorateBagFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagShowSetReq::kTypeFieldNumber;
const int CSDecorateBagShowSetReq::kIdFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagShowSetReq::CSDecorateBagShowSetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagShowSetReq::InitAsDefaultInstance() {
}

CSDecorateBagShowSetReq::CSDecorateBagShowSetReq(const CSDecorateBagShowSetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagShowSetReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagShowSetReq::~CSDecorateBagShowSetReq() {
  SharedDtor();
}

void CSDecorateBagShowSetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagShowSetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagShowSetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagShowSetReq_descriptor_;
}

const CSDecorateBagShowSetReq& CSDecorateBagShowSetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagShowSetReq* CSDecorateBagShowSetReq::default_instance_ = NULL;

CSDecorateBagShowSetReq* CSDecorateBagShowSetReq::New() const {
  return new CSDecorateBagShowSetReq;
}

void CSDecorateBagShowSetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagShowSetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagShowSetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagShowSetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagShowSetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagShowSetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagShowSetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagShowSetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagShowSetReq::MergeFrom(const CSDecorateBagShowSetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagShowSetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagShowSetReq::CopyFrom(const CSDecorateBagShowSetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagShowSetReq::IsInitialized() const {

  return true;
}

void CSDecorateBagShowSetReq::Swap(CSDecorateBagShowSetReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagShowSetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagShowSetReq_descriptor_;
  metadata.reflection = CSDecorateBagShowSetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPFetchReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPFetchReq::CSDecorateBagVIPFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPFetchReq::InitAsDefaultInstance() {
}

CSDecorateBagVIPFetchReq::CSDecorateBagVIPFetchReq(const CSDecorateBagVIPFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPFetchReq::~CSDecorateBagVIPFetchReq() {
  SharedDtor();
}

void CSDecorateBagVIPFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagVIPFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPFetchReq_descriptor_;
}

const CSDecorateBagVIPFetchReq& CSDecorateBagVIPFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPFetchReq* CSDecorateBagVIPFetchReq::default_instance_ = NULL;

CSDecorateBagVIPFetchReq* CSDecorateBagVIPFetchReq::New() const {
  return new CSDecorateBagVIPFetchReq;
}

void CSDecorateBagVIPFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPFetchReq::MergeFrom(const CSDecorateBagVIPFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchReq::CopyFrom(const CSDecorateBagVIPFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPFetchReq::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPFetchReq::Swap(CSDecorateBagVIPFetchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPFetchReq_descriptor_;
  metadata.reflection = CSDecorateBagVIPFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPItem::kVipGreadFieldNumber;
const int CSDecorateBagVIPItem::kVipExperFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPItem::CSDecorateBagVIPItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPItem::InitAsDefaultInstance() {
}

CSDecorateBagVIPItem::CSDecorateBagVIPItem(const CSDecorateBagVIPItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPItem::SharedCtor() {
  _cached_size_ = 0;
  vipgread_ = 0u;
  vipexper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPItem::~CSDecorateBagVIPItem() {
  SharedDtor();
}

void CSDecorateBagVIPItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagVIPItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPItem_descriptor_;
}

const CSDecorateBagVIPItem& CSDecorateBagVIPItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPItem* CSDecorateBagVIPItem::default_instance_ = NULL;

CSDecorateBagVIPItem* CSDecorateBagVIPItem::New() const {
  return new CSDecorateBagVIPItem;
}

void CSDecorateBagVIPItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vipgread_ = 0u;
    vipexper_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 VipGread = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipgread_)));
          set_has_vipgread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VipExper;
        break;
      }

      // optional uint32 VipExper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipExper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexper_)));
          set_has_vipexper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 VipGread = 1;
  if (has_vipgread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vipgread(), output);
  }

  // optional uint32 VipExper = 2;
  if (has_vipexper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vipexper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 VipGread = 1;
  if (has_vipgread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vipgread(), target);
  }

  // optional uint32 VipExper = 2;
  if (has_vipexper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vipexper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 VipGread = 1;
    if (has_vipgread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipgread());
    }

    // optional uint32 VipExper = 2;
    if (has_vipexper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPItem::MergeFrom(const CSDecorateBagVIPItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipgread()) {
      set_vipgread(from.vipgread());
    }
    if (from.has_vipexper()) {
      set_vipexper(from.vipexper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPItem::CopyFrom(const CSDecorateBagVIPItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPItem::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPItem::Swap(CSDecorateBagVIPItem* other) {
  if (other != this) {
    std::swap(vipgread_, other->vipgread_);
    std::swap(vipexper_, other->vipexper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPItem_descriptor_;
  metadata.reflection = CSDecorateBagVIPItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPList::kVIPItemListFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPList::CSDecorateBagVIPList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPList::InitAsDefaultInstance() {
}

CSDecorateBagVIPList::CSDecorateBagVIPList(const CSDecorateBagVIPList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPList::~CSDecorateBagVIPList() {
  SharedDtor();
}

void CSDecorateBagVIPList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDecorateBagVIPList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPList_descriptor_;
}

const CSDecorateBagVIPList& CSDecorateBagVIPList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPList* CSDecorateBagVIPList::default_instance_ = NULL;

CSDecorateBagVIPList* CSDecorateBagVIPList::New() const {
  return new CSDecorateBagVIPList;
}

void CSDecorateBagVIPList::Clear() {
  vipitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSDecorateBagVIPItem VIPItemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIPItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_VIPItemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSDecorateBagVIPItem VIPItemList = 1;
  for (int i = 0; i < this->vipitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipitemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSDecorateBagVIPItem VIPItemList = 1;
  for (int i = 0; i < this->vipitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipitemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPList::ByteSize() const {
  int total_size = 0;

  // repeated .CSDecorateBagVIPItem VIPItemList = 1;
  total_size += 1 * this->vipitemlist_size();
  for (int i = 0; i < this->vipitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPList::MergeFrom(const CSDecorateBagVIPList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipitemlist_.MergeFrom(from.vipitemlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPList::CopyFrom(const CSDecorateBagVIPList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPList::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPList::Swap(CSDecorateBagVIPList* other) {
  if (other != this) {
    vipitemlist_.Swap(&other->vipitemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPList_descriptor_;
  metadata.reflection = CSDecorateBagVIPList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagVIPFetchRsp::kTypeFieldNumber;
const int CSDecorateBagVIPFetchRsp::kIdFieldNumber;
const int CSDecorateBagVIPFetchRsp::kDecorateBagInfoFieldNumber;
const int CSDecorateBagVIPFetchRsp::kVipListFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagVIPFetchRsp::CSDecorateBagVIPFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagVIPFetchRsp::InitAsDefaultInstance() {
  decoratebaginfo_ = const_cast< ::CSDecorateBagInfo*>(&::CSDecorateBagInfo::default_instance());
  viplist_ = const_cast< ::CSDecorateBagVIPList*>(&::CSDecorateBagVIPList::default_instance());
}

CSDecorateBagVIPFetchRsp::CSDecorateBagVIPFetchRsp(const CSDecorateBagVIPFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  decoratebaginfo_ = NULL;
  viplist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagVIPFetchRsp::~CSDecorateBagVIPFetchRsp() {
  SharedDtor();
}

void CSDecorateBagVIPFetchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete decoratebaginfo_;
    delete viplist_;
  }
}

void CSDecorateBagVIPFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagVIPFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagVIPFetchRsp_descriptor_;
}

const CSDecorateBagVIPFetchRsp& CSDecorateBagVIPFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagVIPFetchRsp* CSDecorateBagVIPFetchRsp::default_instance_ = NULL;

CSDecorateBagVIPFetchRsp* CSDecorateBagVIPFetchRsp::New() const {
  return new CSDecorateBagVIPFetchRsp;
}

void CSDecorateBagVIPFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    if (has_decoratebaginfo()) {
      if (decoratebaginfo_ != NULL) decoratebaginfo_->::CSDecorateBagInfo::Clear();
    }
    if (has_viplist()) {
      if (viplist_ != NULL) viplist_->::CSDecorateBagVIPList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagVIPFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DecorateBagInfo;
        break;
      }

      // optional .CSDecorateBagInfo DecorateBagInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebaginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_VipList;
        break;
      }

      // optional .CSDecorateBagVIPList VipList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagVIPFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decoratebaginfo(), output);
  }

  // optional .CSDecorateBagVIPList VipList = 4;
  if (has_viplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->viplist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagVIPFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .CSDecorateBagInfo DecorateBagInfo = 3;
  if (has_decoratebaginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->decoratebaginfo(), target);
  }

  // optional .CSDecorateBagVIPList VipList = 4;
  if (has_viplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->viplist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagVIPFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .CSDecorateBagInfo DecorateBagInfo = 3;
    if (has_decoratebaginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebaginfo());
    }

    // optional .CSDecorateBagVIPList VipList = 4;
    if (has_viplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viplist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagVIPFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagVIPFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagVIPFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagVIPFetchRsp::MergeFrom(const CSDecorateBagVIPFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_decoratebaginfo()) {
      mutable_decoratebaginfo()->::CSDecorateBagInfo::MergeFrom(from.decoratebaginfo());
    }
    if (from.has_viplist()) {
      mutable_viplist()->::CSDecorateBagVIPList::MergeFrom(from.viplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagVIPFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagVIPFetchRsp::CopyFrom(const CSDecorateBagVIPFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagVIPFetchRsp::IsInitialized() const {

  return true;
}

void CSDecorateBagVIPFetchRsp::Swap(CSDecorateBagVIPFetchRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(decoratebaginfo_, other->decoratebaginfo_);
    std::swap(viplist_, other->viplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagVIPFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagVIPFetchRsp_descriptor_;
  metadata.reflection = CSDecorateBagVIPFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagReqParam::kFetchReqFieldNumber;
const int CSDecorateBagReqParam::kShowSetReqFieldNumber;
const int CSDecorateBagReqParam::kVIPFetchReqFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagReqParam::CSDecorateBagReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagReqParam::InitAsDefaultInstance() {
  fetchreq_ = const_cast< ::CSDecorateBagFetchReq*>(&::CSDecorateBagFetchReq::default_instance());
  showsetreq_ = const_cast< ::CSDecorateBagShowSetReq*>(&::CSDecorateBagShowSetReq::default_instance());
  vipfetchreq_ = const_cast< ::CSDecorateBagVIPFetchReq*>(&::CSDecorateBagVIPFetchReq::default_instance());
}

CSDecorateBagReqParam::CSDecorateBagReqParam(const CSDecorateBagReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagReqParam::SharedCtor() {
  _cached_size_ = 0;
  fetchreq_ = NULL;
  showsetreq_ = NULL;
  vipfetchreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagReqParam::~CSDecorateBagReqParam() {
  SharedDtor();
}

void CSDecorateBagReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchreq_;
    delete showsetreq_;
    delete vipfetchreq_;
  }
}

void CSDecorateBagReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagReqParam_descriptor_;
}

const CSDecorateBagReqParam& CSDecorateBagReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagReqParam* CSDecorateBagReqParam::default_instance_ = NULL;

CSDecorateBagReqParam* CSDecorateBagReqParam::New() const {
  return new CSDecorateBagReqParam;
}

void CSDecorateBagReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchreq()) {
      if (fetchreq_ != NULL) fetchreq_->::CSDecorateBagFetchReq::Clear();
    }
    if (has_showsetreq()) {
      if (showsetreq_ != NULL) showsetreq_->::CSDecorateBagShowSetReq::Clear();
    }
    if (has_vipfetchreq()) {
      if (vipfetchreq_ != NULL) vipfetchreq_->::CSDecorateBagVIPFetchReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSDecorateBagFetchReq FetchReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ShowSetReq;
        break;
      }

      // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowSetReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showsetreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VIPFetchReq;
        break;
      }

      // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIPFetchReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipfetchreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSDecorateBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchreq(), output);
  }

  // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
  if (has_showsetreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->showsetreq(), output);
  }

  // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
  if (has_vipfetchreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vipfetchreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSDecorateBagFetchReq FetchReq = 1;
  if (has_fetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchreq(), target);
  }

  // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
  if (has_showsetreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->showsetreq(), target);
  }

  // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
  if (has_vipfetchreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vipfetchreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSDecorateBagFetchReq FetchReq = 1;
    if (has_fetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchreq());
    }

    // optional .CSDecorateBagShowSetReq ShowSetReq = 2;
    if (has_showsetreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showsetreq());
    }

    // optional .CSDecorateBagVIPFetchReq VIPFetchReq = 3;
    if (has_vipfetchreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipfetchreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagReqParam::MergeFrom(const CSDecorateBagReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchreq()) {
      mutable_fetchreq()->::CSDecorateBagFetchReq::MergeFrom(from.fetchreq());
    }
    if (from.has_showsetreq()) {
      mutable_showsetreq()->::CSDecorateBagShowSetReq::MergeFrom(from.showsetreq());
    }
    if (from.has_vipfetchreq()) {
      mutable_vipfetchreq()->::CSDecorateBagVIPFetchReq::MergeFrom(from.vipfetchreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagReqParam::CopyFrom(const CSDecorateBagReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagReqParam::IsInitialized() const {

  return true;
}

void CSDecorateBagReqParam::Swap(CSDecorateBagReqParam* other) {
  if (other != this) {
    std::swap(fetchreq_, other->fetchreq_);
    std::swap(showsetreq_, other->showsetreq_);
    std::swap(vipfetchreq_, other->vipfetchreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagReqParam_descriptor_;
  metadata.reflection = CSDecorateBagReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagRspParam::kFetchRspFieldNumber;
const int CSDecorateBagRspParam::kVIPFetchRspFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagRspParam::CSDecorateBagRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagRspParam::InitAsDefaultInstance() {
  fetchrsp_ = const_cast< ::CSDecorateBagFetchRsp*>(&::CSDecorateBagFetchRsp::default_instance());
  vipfetchrsp_ = const_cast< ::CSDecorateBagVIPFetchRsp*>(&::CSDecorateBagVIPFetchRsp::default_instance());
}

CSDecorateBagRspParam::CSDecorateBagRspParam(const CSDecorateBagRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagRspParam::SharedCtor() {
  _cached_size_ = 0;
  fetchrsp_ = NULL;
  vipfetchrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagRspParam::~CSDecorateBagRspParam() {
  SharedDtor();
}

void CSDecorateBagRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete fetchrsp_;
    delete vipfetchrsp_;
  }
}

void CSDecorateBagRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagRspParam_descriptor_;
}

const CSDecorateBagRspParam& CSDecorateBagRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagRspParam* CSDecorateBagRspParam::default_instance_ = NULL;

CSDecorateBagRspParam* CSDecorateBagRspParam::New() const {
  return new CSDecorateBagRspParam;
}

void CSDecorateBagRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetchrsp()) {
      if (fetchrsp_ != NULL) fetchrsp_->::CSDecorateBagFetchRsp::Clear();
    }
    if (has_vipfetchrsp()) {
      if (vipfetchrsp_ != NULL) vipfetchrsp_->::CSDecorateBagVIPFetchRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSDecorateBagFetchRsp FetchRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VIPFetchRsp;
        break;
      }

      // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIPFetchRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipfetchrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSDecorateBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetchrsp(), output);
  }

  // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
  if (has_vipfetchrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vipfetchrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSDecorateBagFetchRsp FetchRsp = 1;
  if (has_fetchrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetchrsp(), target);
  }

  // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
  if (has_vipfetchrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vipfetchrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSDecorateBagFetchRsp FetchRsp = 1;
    if (has_fetchrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchrsp());
    }

    // optional .CSDecorateBagVIPFetchRsp VIPFetchRsp = 2;
    if (has_vipfetchrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipfetchrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagRspParam::MergeFrom(const CSDecorateBagRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetchrsp()) {
      mutable_fetchrsp()->::CSDecorateBagFetchRsp::MergeFrom(from.fetchrsp());
    }
    if (from.has_vipfetchrsp()) {
      mutable_vipfetchrsp()->::CSDecorateBagVIPFetchRsp::MergeFrom(from.vipfetchrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagRspParam::CopyFrom(const CSDecorateBagRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagRspParam::IsInitialized() const {

  return true;
}

void CSDecorateBagRspParam::Swap(CSDecorateBagRspParam* other) {
  if (other != this) {
    std::swap(fetchrsp_, other->fetchrsp_);
    std::swap(vipfetchrsp_, other->vipfetchrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagRspParam_descriptor_;
  metadata.reflection = CSDecorateBagRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagReq::kCmdFieldNumber;
const int CSDecorateBagReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagReq::CSDecorateBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSDecorateBagReqParam*>(&::CSDecorateBagReqParam::default_instance());
}

CSDecorateBagReq::CSDecorateBagReq(const CSDecorateBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagReq::~CSDecorateBagReq() {
  SharedDtor();
}

void CSDecorateBagReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSDecorateBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagReq_descriptor_;
}

const CSDecorateBagReq& CSDecorateBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagReq* CSDecorateBagReq::default_instance_ = NULL;

CSDecorateBagReq* CSDecorateBagReq::New() const {
  return new CSDecorateBagReq;
}

void CSDecorateBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSDecorateBagReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSDecorateBagCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSDecorateBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSDecorateBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSDecorateBagReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSDecorateBagCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSDecorateBagReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSDecorateBagCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSDecorateBagReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSDecorateBagCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSDecorateBagReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagReq::MergeFrom(const CSDecorateBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSDecorateBagReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagReq::CopyFrom(const CSDecorateBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSDecorateBagReq::Swap(CSDecorateBagReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagReq_descriptor_;
  metadata.reflection = CSDecorateBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDecorateBagRsp::kResultFieldNumber;
const int CSDecorateBagRsp::kCmdFieldNumber;
const int CSDecorateBagRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSDecorateBagRsp::CSDecorateBagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDecorateBagRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSDecorateBagRspParam*>(&::CSDecorateBagRspParam::default_instance());
}

CSDecorateBagRsp::CSDecorateBagRsp(const CSDecorateBagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDecorateBagRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDecorateBagRsp::~CSDecorateBagRsp() {
  SharedDtor();
}

void CSDecorateBagRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSDecorateBagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDecorateBagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDecorateBagRsp_descriptor_;
}

const CSDecorateBagRsp& CSDecorateBagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSDecorateBagRsp* CSDecorateBagRsp::default_instance_ = NULL;

CSDecorateBagRsp* CSDecorateBagRsp::New() const {
  return new CSDecorateBagRsp;
}

void CSDecorateBagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSDecorateBagRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDecorateBagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSDecorateBagCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSDecorateBagCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSDecorateBagCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSDecorateBagRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDecorateBagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSDecorateBagCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSDecorateBagRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDecorateBagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSDecorateBagCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSDecorateBagRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDecorateBagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSDecorateBagCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSDecorateBagRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDecorateBagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDecorateBagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDecorateBagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDecorateBagRsp::MergeFrom(const CSDecorateBagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSDecorateBagRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDecorateBagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDecorateBagRsp::CopyFrom(const CSDecorateBagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDecorateBagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSDecorateBagRsp::Swap(CSDecorateBagRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDecorateBagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDecorateBagRsp_descriptor_;
  metadata.reflection = CSDecorateBagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgBody::kRegisterLoginReqFieldNumber;
const int CSMsgBody::kRegisterLoginRspFieldNumber;
const int CSMsgBody::kBagReqFieldNumber;
const int CSMsgBody::kBagRspFieldNumber;
const int CSMsgBody::kDecorateBagReqFieldNumber;
const int CSMsgBody::kDecorateBagRspFieldNumber;
#endif  // !_MSC_VER

CSMsgBody::CSMsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgBody::InitAsDefaultInstance() {
  registerloginreq_ = const_cast< ::CSRegisterLoginReq*>(&::CSRegisterLoginReq::default_instance());
  registerloginrsp_ = const_cast< ::CSRegisterLoginRsp*>(&::CSRegisterLoginRsp::default_instance());
  bagreq_ = const_cast< ::CSBagReq*>(&::CSBagReq::default_instance());
  bagrsp_ = const_cast< ::CSBagRsp*>(&::CSBagRsp::default_instance());
  decoratebagreq_ = const_cast< ::CSDecorateBagReq*>(&::CSDecorateBagReq::default_instance());
  decoratebagrsp_ = const_cast< ::CSDecorateBagRsp*>(&::CSDecorateBagRsp::default_instance());
}

CSMsgBody::CSMsgBody(const CSMsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgBody::SharedCtor() {
  _cached_size_ = 0;
  registerloginreq_ = NULL;
  registerloginrsp_ = NULL;
  bagreq_ = NULL;
  bagrsp_ = NULL;
  decoratebagreq_ = NULL;
  decoratebagrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgBody::~CSMsgBody() {
  SharedDtor();
}

void CSMsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete registerloginreq_;
    delete registerloginrsp_;
    delete bagreq_;
    delete bagrsp_;
    delete decoratebagreq_;
    delete decoratebagrsp_;
  }
}

void CSMsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgBody_descriptor_;
}

const CSMsgBody& CSMsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgBody* CSMsgBody::default_instance_ = NULL;

CSMsgBody* CSMsgBody::New() const {
  return new CSMsgBody;
}

void CSMsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_registerloginreq()) {
      if (registerloginreq_ != NULL) registerloginreq_->::CSRegisterLoginReq::Clear();
    }
    if (has_registerloginrsp()) {
      if (registerloginrsp_ != NULL) registerloginrsp_->::CSRegisterLoginRsp::Clear();
    }
    if (has_bagreq()) {
      if (bagreq_ != NULL) bagreq_->::CSBagReq::Clear();
    }
    if (has_bagrsp()) {
      if (bagrsp_ != NULL) bagrsp_->::CSBagRsp::Clear();
    }
    if (has_decoratebagreq()) {
      if (decoratebagreq_ != NULL) decoratebagreq_->::CSDecorateBagReq::Clear();
    }
    if (has_decoratebagrsp()) {
      if (decoratebagrsp_ != NULL) decoratebagrsp_->::CSDecorateBagRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSRegisterLoginReq RegisterLoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterLoginRsp;
        break;
      }

      // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterLoginRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BagReq;
        break;
      }

      // optional .CSBagReq BagReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BagRsp;
        break;
      }

      // optional .CSBagRsp BagRsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DecorateBagReq;
        break;
      }

      // optional .CSDecorateBagReq DecorateBagReq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebagreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DecorateBagRsp;
        break;
      }

      // optional .CSDecorateBagRsp DecorateBagRsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorateBagRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decoratebagrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->registerloginreq(), output);
  }

  // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerloginrsp(), output);
  }

  // optional .CSBagReq BagReq = 3;
  if (has_bagreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bagreq(), output);
  }

  // optional .CSBagRsp BagRsp = 4;
  if (has_bagrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bagrsp(), output);
  }

  // optional .CSDecorateBagReq DecorateBagReq = 5;
  if (has_decoratebagreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->decoratebagreq(), output);
  }

  // optional .CSDecorateBagRsp DecorateBagRsp = 6;
  if (has_decoratebagrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->decoratebagrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->registerloginreq(), target);
  }

  // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerloginrsp(), target);
  }

  // optional .CSBagReq BagReq = 3;
  if (has_bagreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bagreq(), target);
  }

  // optional .CSBagRsp BagRsp = 4;
  if (has_bagrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bagrsp(), target);
  }

  // optional .CSDecorateBagReq DecorateBagReq = 5;
  if (has_decoratebagreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->decoratebagreq(), target);
  }

  // optional .CSDecorateBagRsp DecorateBagRsp = 6;
  if (has_decoratebagrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->decoratebagrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSRegisterLoginReq RegisterLoginReq = 1;
    if (has_registerloginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginreq());
    }

    // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
    if (has_registerloginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginrsp());
    }

    // optional .CSBagReq BagReq = 3;
    if (has_bagreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagreq());
    }

    // optional .CSBagRsp BagRsp = 4;
    if (has_bagrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagrsp());
    }

    // optional .CSDecorateBagReq DecorateBagReq = 5;
    if (has_decoratebagreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebagreq());
    }

    // optional .CSDecorateBagRsp DecorateBagRsp = 6;
    if (has_decoratebagrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decoratebagrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgBody::MergeFrom(const CSMsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registerloginreq()) {
      mutable_registerloginreq()->::CSRegisterLoginReq::MergeFrom(from.registerloginreq());
    }
    if (from.has_registerloginrsp()) {
      mutable_registerloginrsp()->::CSRegisterLoginRsp::MergeFrom(from.registerloginrsp());
    }
    if (from.has_bagreq()) {
      mutable_bagreq()->::CSBagReq::MergeFrom(from.bagreq());
    }
    if (from.has_bagrsp()) {
      mutable_bagrsp()->::CSBagRsp::MergeFrom(from.bagrsp());
    }
    if (from.has_decoratebagreq()) {
      mutable_decoratebagreq()->::CSDecorateBagReq::MergeFrom(from.decoratebagreq());
    }
    if (from.has_decoratebagrsp()) {
      mutable_decoratebagrsp()->::CSDecorateBagRsp::MergeFrom(from.decoratebagrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgBody::CopyFrom(const CSMsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgBody::IsInitialized() const {

  if (has_registerloginreq()) {
    if (!this->registerloginreq().IsInitialized()) return false;
  }
  if (has_registerloginrsp()) {
    if (!this->registerloginrsp().IsInitialized()) return false;
  }
  if (has_bagreq()) {
    if (!this->bagreq().IsInitialized()) return false;
  }
  if (has_bagrsp()) {
    if (!this->bagrsp().IsInitialized()) return false;
  }
  if (has_decoratebagreq()) {
    if (!this->decoratebagreq().IsInitialized()) return false;
  }
  if (has_decoratebagrsp()) {
    if (!this->decoratebagrsp().IsInitialized()) return false;
  }
  return true;
}

void CSMsgBody::Swap(CSMsgBody* other) {
  if (other != this) {
    std::swap(registerloginreq_, other->registerloginreq_);
    std::swap(registerloginrsp_, other->registerloginrsp_);
    std::swap(bagreq_, other->bagreq_);
    std::swap(bagrsp_, other->bagrsp_);
    std::swap(decoratebagreq_, other->decoratebagreq_);
    std::swap(decoratebagrsp_, other->decoratebagrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgBody_descriptor_;
  metadata.reflection = CSMsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgHead::kUidFieldNumber;
const int CSMsgHead::kMsgIDFieldNumber;
#endif  // !_MSC_VER

CSMsgHead::CSMsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgHead::InitAsDefaultInstance() {
}

CSMsgHead::CSMsgHead(const CSMsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgHead::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgHead::~CSMsgHead() {
  SharedDtor();
}

void CSMsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgHead_descriptor_;
}

const CSMsgHead& CSMsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgHead* CSMsgHead::default_instance_ = NULL;

CSMsgHead* CSMsgHead::New() const {
  return new CSMsgHead;
}

void CSMsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgID;
        break;
      }

      // required .CSMsgID msgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSMsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required .CSMsgID msgID = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required .CSMsgID msgID = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required .CSMsgID msgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgHead::MergeFrom(const CSMsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgHead::CopyFrom(const CSMsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSMsgHead::Swap(CSMsgHead* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgHead_descriptor_;
  metadata.reflection = CSMsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsg::kHeadFieldNumber;
const int CSMsg::kBodyFieldNumber;
#endif  // !_MSC_VER

CSMsg::CSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsg::InitAsDefaultInstance() {
  head_ = const_cast< ::CSMsgHead*>(&::CSMsgHead::default_instance());
  body_ = const_cast< ::CSMsgBody*>(&::CSMsgBody::default_instance());
}

CSMsg::CSMsg(const CSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsg::~CSMsg() {
  SharedDtor();
}

void CSMsg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete body_;
  }
}

void CSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsg_descriptor_;
}

const CSMsg& CSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsg* CSMsg::default_instance_ = NULL;

CSMsg* CSMsg::New() const {
  return new CSMsg;
}

void CSMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::CSMsgHead::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::CSMsgBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSMsgHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .CSMsgBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSMsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .CSMsgBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSMsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .CSMsgBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSMsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .CSMsgBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsg::MergeFrom(const CSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::CSMsgHead::MergeFrom(from.head());
    }
    if (from.has_body()) {
      mutable_body()->::CSMsgBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsg::CopyFrom(const CSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void CSMsg::Swap(CSMsg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsg_descriptor_;
  metadata.reflection = CSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
